// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App should pass down to component getInitialProps 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c1 *:focus {
  outline: 0;
}

<MyApp
  pageProps={Object {}}
  user={
    Object {
      "isLoggedIn": true,
      "userName": "testUser",
    }
  }
>
  <Container>
    <Head>
      <SideEffect
        handleStateChange={null}
        isAmp={false}
        reduceComponentsToState={[Function]}
      />
    </Head>
    <AppProviders
      user={
        Object {
          "isLoggedIn": true,
          "userName": "testUser",
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoint": Object {
              "extraLarge": 1224,
              "large": 1025,
              "medium": 769,
              "small": 451,
            },
            "color": Object {
              "black": "#1e1e1e",
              "grey": "#ccc",
              "white": "#ffffff",
            },
            "component": Object {
              "spacing": "1.25em",
            },
          }
        }
      >
        <ResizeAnimationHandler>
          <styled.div
            resizing={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: column;
  flex: 1;

  ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              resizing={false}
            >
              <div
                className="c0"
              >
                <Index>
                  <styled.div
                    tabbing={false}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bwzfXH",
                            "isStatic": false,
                            "lastClassName": "c1",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
  flex: 1;

  *:focus {
    outline: ",
                              [Function],
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bwzfXH",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      tabbing={false}
                    >
                      <div
                        className="c1"
                      />
                    </StyledComponent>
                  </styled.div>
                </Index>
              </div>
            </StyledComponent>
          </styled.div>
        </ResizeAnimationHandler>
      </ThemeProvider>
    </AppProviders>
  </Container>
</MyApp>
`;

exports[`App should render as expected with layout passed with component 1`] = `
<Container>
  <Head>
    <title>
      Avatar Test
    </title>
  </Head>
  <GlobalStyleComponent />
  <AppProviders
    protectedPage={false}
    user={
      Object {
        "avatar": null,
        "isLoggedIn": false,
        "protectedPage": false,
        "status": "Available",
        "userName": null,
      }
    }
  >
    <Index>
      <Component
        Component={[Function]}
      />
    </Index>
  </AppProviders>
</Container>
`;

exports[`App should render as expected with no layout passed with component 1`] = `
<Container>
  <Head>
    <title>
      Avatar Test
    </title>
  </Head>
  <GlobalStyleComponent />
  <AppProviders
    protectedPage={false}
    user={
      Object {
        "avatar": null,
        "isLoggedIn": false,
        "protectedPage": false,
        "status": "Available",
        "userName": null,
      }
    }
  >
    <Index>
      <Foundation
        user={
          Object {
            "avatar": null,
            "isLoggedIn": false,
            "protectedPage": false,
            "status": "Available",
            "userName": null,
          }
        }
      >
        <MockComponent />
      </Foundation>
    </Index>
  </AppProviders>
</Container>
`;

exports[`App should render as expected with no passed component 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c1 *:focus {
  outline: 0;
}

<MyApp
  protectedPage={false}
  user={
    Object {
      "avatar": null,
      "isLoggedIn": false,
      "protectedPage": false,
      "status": "Available",
      "userName": null,
    }
  }
>
  <Container>
    <Head>
      <SideEffect
        handleStateChange={null}
        isAmp={false}
        reduceComponentsToState={[Function]}
      />
    </Head>
    <AppProviders
      protectedPage={false}
      user={
        Object {
          "avatar": null,
          "isLoggedIn": false,
          "protectedPage": false,
          "status": "Available",
          "userName": null,
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoint": Object {
              "extraLarge": 1224,
              "large": 1025,
              "medium": 769,
              "small": 451,
            },
            "color": Object {
              "available": "rgb(46, 204, 113)",
              "background": "rgb(53, 59, 72)",
              "black": "#1e1e1e",
              "blue": "#2d8bd8",
              "grey": "rgb(220, 221, 225)",
              "grey_light": "#eaeaea",
              "notReady": "rgb(251, 197, 49)",
              "unavailable": "rgb(194, 54, 22)",
              "white": "#ffffff",
            },
            "component": Object {
              "spacing": "1.25em",
            },
          }
        }
      >
        <UserProvider
          protectedPage={false}
          user={
            Object {
              "avatar": null,
              "isLoggedIn": false,
              "protectedPage": false,
              "status": "Available",
              "userName": null,
            }
          }
        >
          <ResizeAnimationHandler>
            <styled.div
              resizing={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "c0",
                      "rules": Array [
                        "
  display: flex;
  flex-direction: column;
  flex: 1;

  ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                resizing={false}
              >
                <div
                  className="c0"
                >
                  <Index>
                    <styled.div
                      tabbing={false}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bwzfXH",
                              "isStatic": false,
                              "lastClassName": "c1",
                              "rules": Array [
                                "
  display: flex;
  flex-direction: column;
  flex: 1;

  *:focus {
    outline: ",
                                [Function],
                                ";
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bwzfXH",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        tabbing={false}
                      >
                        <div
                          className="c1"
                        />
                      </StyledComponent>
                    </styled.div>
                  </Index>
                </div>
              </StyledComponent>
            </styled.div>
          </ResizeAnimationHandler>
        </UserProvider>
      </ThemeProvider>
    </AppProviders>
  </Container>
</MyApp>
`;

exports[`App should render as expected with passed component 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c1 *:focus {
  outline: 0;
}

<MyApp
  user={
    Object {
      "isLoggedIn": true,
      "userName": "testUser",
    }
  }
>
  <Container>
    <Head>
      <SideEffect
        handleStateChange={null}
        isAmp={false}
        reduceComponentsToState={[Function]}
      />
    </Head>
    <AppProviders
      user={
        Object {
          "isLoggedIn": true,
          "userName": "testUser",
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoint": Object {
              "extraLarge": 1224,
              "large": 1025,
              "medium": 769,
              "small": 451,
            },
            "color": Object {
              "black": "#1e1e1e",
              "grey": "#ccc",
              "white": "#ffffff",
            },
            "component": Object {
              "spacing": "1.25em",
            },
          }
        }
      >
        <ResizeAnimationHandler>
          <styled.div
            resizing={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: column;
  flex: 1;

  ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              resizing={false}
            >
              <div
                className="c0"
              >
                <Index>
                  <styled.div
                    tabbing={false}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bwzfXH",
                            "isStatic": false,
                            "lastClassName": "c1",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
  flex: 1;

  *:focus {
    outline: ",
                              [Function],
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bwzfXH",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      tabbing={false}
                    >
                      <div
                        className="c1"
                      />
                    </StyledComponent>
                  </styled.div>
                </Index>
              </div>
            </StyledComponent>
          </styled.div>
        </ResizeAnimationHandler>
      </ThemeProvider>
    </AppProviders>
  </Container>
</MyApp>
`;

exports[`App should render only reset styles 1`] = `
<Container>
  <Head>
    <title>
      Avatar Test
    </title>
  </Head>
  <GlobalStyleComponent />
  <AppProviders
    protectedPage={false}
    user={
      Object {
        "avatar": null,
        "isLoggedIn": false,
        "protectedPage": false,
        "status": "Available",
        "userName": null,
      }
    }
  >
    <Index>
      <Foundation
        user={
          Object {
            "avatar": null,
            "isLoggedIn": false,
            "protectedPage": false,
            "status": "Available",
            "userName": null,
          }
        }
      >
        <MockComponent />
      </Foundation>
    </Index>
  </AppProviders>
</Container>
`;

exports[`App should render with all styles 1`] = `
<Container>
  <Head>
    <title>
      Avatar Test
    </title>
  </Head>
  <GlobalStyleComponent />
  <AppProviders
    protectedPage={false}
    user={
      Object {
        "avatar": null,
        "isLoggedIn": false,
        "protectedPage": false,
        "status": "Available",
        "userName": null,
      }
    }
  >
    <Index>
      <Foundation
        user={
          Object {
            "avatar": null,
            "isLoggedIn": false,
            "protectedPage": false,
            "status": "Available",
            "userName": null,
          }
        }
      >
        <MockComponent />
      </Foundation>
    </Index>
  </AppProviders>
</Container>
`;
